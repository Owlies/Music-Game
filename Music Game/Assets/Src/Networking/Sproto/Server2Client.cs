// Generated by sprotodump. DO NOT EDIT!
// source: /Users/yanghuay/Projects/Playground/Owlies/Owlies_Server/content/Server2Client.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class LoginResponse : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _user_id; // tag 0
		public string user_id {
			get { return _user_id; }
			set { base.has_field.set_field (0, true); _user_id = value; }
		}
		public bool HasUser_id {
			get { return base.has_field.has_field (0); }
		}

		private string _timestamp; // tag 1
		public string timestamp {
			get { return _timestamp; }
			set { base.has_field.set_field (1, true); _timestamp = value; }
		}
		public bool HasTimestamp {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _energy; // tag 2
		public Int64 energy {
			get { return _energy; }
			set { base.has_field.set_field (2, true); _energy = value; }
		}
		public bool HasEnergy {
			get { return base.has_field.has_field (2); }
		}

		public LoginResponse () : base(max_field_count) {}

		public LoginResponse (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.user_id = base.deserialize.read_string ();
					break;
				case 1:
					this.timestamp = base.deserialize.read_string ();
					break;
				case 2:
					this.energy = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.user_id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_string (this.timestamp, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.energy, 2);
			}

			return base.serialize.close ();
		}
	}


}

